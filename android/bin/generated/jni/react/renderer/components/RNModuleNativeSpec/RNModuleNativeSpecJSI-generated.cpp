/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNModuleNativeSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setBrightnessDevice(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setBrightnessDevice(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setBrightness(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setBrightness(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_getBrightness(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->getBrightness(
    rt
  );
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setVolume(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setVolume(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_getVolume(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->getVolume(
    rt
  );
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setVolumeNotify(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setVolumeNotify(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_getVolumeNotify(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->getVolumeNotify(
    rt
  );
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setVolumeSystem(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setVolumeSystem(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_getVolumeSystem(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->getVolumeSystem(
    rt
  );
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setVolumeMedia(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setVolumeMedia(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_getVolumeMedia(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->getVolumeMedia(
    rt
  );
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->addListener(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->removeListeners(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_getModeApp(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->getModeApp(
    rt
  );
}
static jsi::Value __hostFunction_NativeModuleNativeCxxSpecJSI_setModeApp(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeModuleNativeCxxSpecJSI *>(&turboModule)->setModeApp(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
  return jsi::Value::undefined();
}

NativeModuleNativeCxxSpecJSI::NativeModuleNativeCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("ModuleNative", jsInvoker) {
  methodMap_["setBrightnessDevice"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setBrightnessDevice};
  methodMap_["setBrightness"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setBrightness};
  methodMap_["getBrightness"] = MethodMetadata {0, __hostFunction_NativeModuleNativeCxxSpecJSI_getBrightness};
  methodMap_["setVolume"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setVolume};
  methodMap_["getVolume"] = MethodMetadata {0, __hostFunction_NativeModuleNativeCxxSpecJSI_getVolume};
  methodMap_["setVolumeNotify"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setVolumeNotify};
  methodMap_["getVolumeNotify"] = MethodMetadata {0, __hostFunction_NativeModuleNativeCxxSpecJSI_getVolumeNotify};
  methodMap_["setVolumeSystem"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setVolumeSystem};
  methodMap_["getVolumeSystem"] = MethodMetadata {0, __hostFunction_NativeModuleNativeCxxSpecJSI_getVolumeSystem};
  methodMap_["setVolumeMedia"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setVolumeMedia};
  methodMap_["getVolumeMedia"] = MethodMetadata {0, __hostFunction_NativeModuleNativeCxxSpecJSI_getVolumeMedia};
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_removeListeners};
  methodMap_["getModeApp"] = MethodMetadata {0, __hostFunction_NativeModuleNativeCxxSpecJSI_getModeApp};
  methodMap_["setModeApp"] = MethodMetadata {1, __hostFunction_NativeModuleNativeCxxSpecJSI_setModeApp};
}


} // namespace facebook::react

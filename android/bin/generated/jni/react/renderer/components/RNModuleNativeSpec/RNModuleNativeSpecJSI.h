/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeModuleNativeCxxSpecJSI : public TurboModule {
protected:
  NativeModuleNativeCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual void setBrightnessDevice(jsi::Runtime &rt, double value) = 0;
  virtual void setBrightness(jsi::Runtime &rt, double value) = 0;
  virtual double getBrightness(jsi::Runtime &rt) = 0;
  virtual void setVolume(jsi::Runtime &rt, double value) = 0;
  virtual double getVolume(jsi::Runtime &rt) = 0;
  virtual void setVolumeNotify(jsi::Runtime &rt, double value) = 0;
  virtual double getVolumeNotify(jsi::Runtime &rt) = 0;
  virtual void setVolumeSystem(jsi::Runtime &rt, double value) = 0;
  virtual double getVolumeSystem(jsi::Runtime &rt) = 0;
  virtual void setVolumeMedia(jsi::Runtime &rt, double value) = 0;
  virtual double getVolumeMedia(jsi::Runtime &rt) = 0;
  virtual void addListener(jsi::Runtime &rt, jsi::String eventName) = 0;
  virtual void removeListeners(jsi::Runtime &rt, double count) = 0;
  virtual jsi::String getModeApp(jsi::Runtime &rt) = 0;
  virtual void setModeApp(jsi::Runtime &rt, jsi::String mode) = 0;

};

template <typename T>
class JSI_EXPORT NativeModuleNativeCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "ModuleNative";

protected:
  NativeModuleNativeCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeModuleNativeCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeModuleNativeCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeModuleNativeCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    void setBrightnessDevice(jsi::Runtime &rt, double value) override {
      static_assert(
          bridging::getParameterCount(&T::setBrightnessDevice) == 2,
          "Expected setBrightnessDevice(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setBrightnessDevice, jsInvoker_, instance_, std::move(value));
    }
    void setBrightness(jsi::Runtime &rt, double value) override {
      static_assert(
          bridging::getParameterCount(&T::setBrightness) == 2,
          "Expected setBrightness(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setBrightness, jsInvoker_, instance_, std::move(value));
    }
    double getBrightness(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getBrightness) == 1,
          "Expected getBrightness(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::getBrightness, jsInvoker_, instance_);
    }
    void setVolume(jsi::Runtime &rt, double value) override {
      static_assert(
          bridging::getParameterCount(&T::setVolume) == 2,
          "Expected setVolume(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setVolume, jsInvoker_, instance_, std::move(value));
    }
    double getVolume(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getVolume) == 1,
          "Expected getVolume(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::getVolume, jsInvoker_, instance_);
    }
    void setVolumeNotify(jsi::Runtime &rt, double value) override {
      static_assert(
          bridging::getParameterCount(&T::setVolumeNotify) == 2,
          "Expected setVolumeNotify(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setVolumeNotify, jsInvoker_, instance_, std::move(value));
    }
    double getVolumeNotify(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getVolumeNotify) == 1,
          "Expected getVolumeNotify(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::getVolumeNotify, jsInvoker_, instance_);
    }
    void setVolumeSystem(jsi::Runtime &rt, double value) override {
      static_assert(
          bridging::getParameterCount(&T::setVolumeSystem) == 2,
          "Expected setVolumeSystem(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setVolumeSystem, jsInvoker_, instance_, std::move(value));
    }
    double getVolumeSystem(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getVolumeSystem) == 1,
          "Expected getVolumeSystem(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::getVolumeSystem, jsInvoker_, instance_);
    }
    void setVolumeMedia(jsi::Runtime &rt, double value) override {
      static_assert(
          bridging::getParameterCount(&T::setVolumeMedia) == 2,
          "Expected setVolumeMedia(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setVolumeMedia, jsInvoker_, instance_, std::move(value));
    }
    double getVolumeMedia(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getVolumeMedia) == 1,
          "Expected getVolumeMedia(...) to have 1 parameters");

      return bridging::callFromJs<double>(
          rt, &T::getVolumeMedia, jsInvoker_, instance_);
    }
    void addListener(jsi::Runtime &rt, jsi::String eventName) override {
      static_assert(
          bridging::getParameterCount(&T::addListener) == 2,
          "Expected addListener(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::addListener, jsInvoker_, instance_, std::move(eventName));
    }
    void removeListeners(jsi::Runtime &rt, double count) override {
      static_assert(
          bridging::getParameterCount(&T::removeListeners) == 2,
          "Expected removeListeners(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::removeListeners, jsInvoker_, instance_, std::move(count));
    }
    jsi::String getModeApp(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getModeApp) == 1,
          "Expected getModeApp(...) to have 1 parameters");

      return bridging::callFromJs<jsi::String>(
          rt, &T::getModeApp, jsInvoker_, instance_);
    }
    void setModeApp(jsi::Runtime &rt, jsi::String mode) override {
      static_assert(
          bridging::getParameterCount(&T::setModeApp) == 2,
          "Expected setModeApp(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::setModeApp, jsInvoker_, instance_, std::move(mode));
    }

  private:
    friend class NativeModuleNativeCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
